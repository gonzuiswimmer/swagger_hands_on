openapi: 3.0.3
info:
  title: B-Dash2 API
  version: '1.0'
  description: hands_on for openapi of B-Dash2
  license:
    name: kazuki_ito
    url: https://gonzuiswimmer.github.io/swagger_hands_on/admin/
servers:
  - url: http://localhost:{port}/api
    description: local環境のAPIサーバー。cf.8180はモックサーバー(=プロキシサーバー)
    variables:
      port:
        default: '80'
        enum:
          - '80'
          - 8180/admin-mock
  - url: https://xxx-admin/api
    description: 開発環境のAPIサーバー
tags:
  - name: healthCheck
    description: 動作確認用API
  - name: auth
    description: 認証系API
  - name: user
    description: 一般ユーザー系API
  - name: top
    description: top画面系API
  - name: department
    description: 部署系API
  - name: adminUser
    description: 管理者向けユーザー制御系API
  - name: adminUserAnnouncement
    description: 管理者向けお知らせ系API
  - name: adminUserInquiry
    description: 管理者向け問い合わせ系API
  - name: adminUserRole
    description: 管理者向けロール制御系API
paths:
  /health-check:
    get:
      summary: test for first api specification
      security: []
      tags:
        - healthCheck
      responses:
        '200':
          $ref: '#/components/responses/SimpleSuccessResponse'
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /auth/login:
    post:
      tags:
        - auth
      summary: ログイン
      security: []
      parameters:
        - $ref: '#/components/parameters/XSRF-TOKEN'
        - $ref: '#/components/parameters/dash_replace2_session'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
                    description: ロール
                    example: admin
        '422':
          $ref: '#/components/responses/422UnprocessableContentError'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /auth/logout:
    post:
      tags:
        - auth
      summary: ログアウト
      security: []
      responses:
        '200':
          description: ログアウト成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: ログアウト成功メッセージ
                    example: Logged out
        '403':
          $ref: '#/components/responses/403ForbiddenError'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /user:
    get:
      tags:
        - user
      summary: get user list
      security: []
      parameters:
        - $ref: '#/components/parameters/XSRF-TOKEN'
        - $ref: '#/components/parameters/dash_replace2_session'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /top:
    get:
      tags:
        - top
      summary: top画面を表示するときに送るapi情報
      description: top画面を表示するときに送るapi情報
      security: []
      requestBody:
        description: sample
        content:
          application/json: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - type: array
                      items:
                        $ref: '#/components/schemas/Announcement'
                    - type: array
                      items:
                        $ref: '#/components/schemas/RecentMonthlyReports'
                    - type: array
                      items:
                        $ref: '#/components/schemas/ReportsOfFollowingUser'
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '403':
          $ref: '#/components/responses/403ForbiddenError'
  /getDepartments:
    get:
      tags:
        - department
      summary: get department list
      description: get department list
      security: []
      requestBody:
        description: you need requestBody to fetch department list
        content:
          application/json: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users:
    get:
      tags:
        - adminUser
      summary: ユーザー検索/一覧画面表示時にuserListを返す
      description: ユーザー検索/一覧画面表示時にuserListを返す
      security: []
      parameters:
        - in: query
          name: user_status
          schema:
            type: string
            enum:
              - retired
              - working
        - in: query
          name: user_name
          schema:
            type: string
            example: 佐藤
        - in: query
          name: hiredMonth
          schema:
            type: string
            format: date-time
            example: '2025-06-30T15:00:00.000Z'
        - in: query
          name: department
          schema:
            $ref: '#/components/schemas/DepartmentEnum'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/User'
                          - properties:
                              department:
                                $ref: '#/components/schemas/Department'
                    current_pape:
                      type: integer
                      example: 1
                    nex_page_url:
                      type: string
                      example: http://localhost/api/admin/xxxxx
                    path:
                      type: string
                      example: http://localhost/api/admin/xxxxx
                    per_page:
                      type: integer
                      example: 20
                    prev_page_url:
                      type: string
                      example: null
                    to:
                      type: integer
                      example: 20
                    total:
                      type: integer
                      example: 92
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users/store:
    post:
      summary: ユーザー新規登録
      tags:
        - adminUser
      security:
        - BeareAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: 登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  CreateUserResult:
                    type: boolean
                  message:
                    type: string
                    nullable: true
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users/edit/{id}:
    get:
      summary: ユーザー編集情報取得
      tags:
        - adminUser
      security:
        - BeareAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 編集情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  user_profile:
                    $ref: '#/components/schemas/UserProfile'
                  followings:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  followers:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users/update/{id}:
    patch:
      summary: ユーザー情報更新
      tags:
        - adminUser
      security:
        - BeareAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: 更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  UpdateUserResult:
                    type: boolean
                  message:
                    type: string
                    nullable: true
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users/destroy/{id}:
    patch:
      summary: ユーザー削除
      tags:
        - adminUser
      security:
        - BeareAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 削除結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  DestroyUserResult:
                    type: boolean
                  message:
                    type: string
                    nullable: true
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users/roles:
    get:
      summary: 権限一覧取得
      tags:
        - adminUserRole
      security:
        - BeareAuth: []
      responses:
        '200':
          description: 権限ユーザー一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users/roles/new/{id}:
    post:
      summary: 権限追加
      tags:
        - adminUserRole
      security:
        - BeareAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 追加結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  addAdminUsersRoleResult:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequestError'
  /admin/users/roles/delete/{id}:
    delete:
      summary: 権限削除
      tags:
        - adminUserRole
      security:
        - BeareAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 削除結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  destroyAdminUserRoleResult:
                    type: boolean
                  message:
                    type: string
                    nullable: true
        '400':
          $ref: '#/components/responses/400BadRequestError'
components:
  securitySchemes:
    BeareAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SuccessResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          description: レスポンスデータ
        message:
          type: string
          description: 成功メッセージ（オプショナル）
    Error:
      type: object
      required:
        - message
      properties:
        code:
          type: string
          description: エラーコード
        message:
          type: string
          description: エラーメッセージ
        details:
          type: object
          description: 追加のエラー詳細情報
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: example@example.com
        password:
          type: string
      required:
        - email
        - password
    User:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        employee_code:
          type: string
        encrypted_email:
          type: string
        entry_date:
          type: string
          format: date
        beginner_flg:
          type: boolean
        deleted_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        encrypted_password:
          type: string
        reset_password_token:
          type: string
        reset_password_sent_at:
          type: string
          format: date-time
        remember_created_at:
          type: string
          format: date-time
        sign_in_count:
          type: number
        current_sign_in_at:
          type: string
          format: date-time
        last_sign_in_at:
          type: string
          format: date-time
        current_sign_in_ip:
          type: string
        last_sign_in_ip:
          type: string
        faled_attempts:
          type: number
        unlock_token:
          type: string
        locked_at:
          type: string
          format: date-time
        gender:
          type: number
        email:
          type: string
        department_id:
          type: number
        email_verified_at:
          type: string
          format: date-time
        tenant_id:
          type: number
    Announcement:
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: テスト記事タイトル
        body:
          type: string
          example: テスト記事の見出し
        published_date:
          type: string
          format: date
          example: '2025-01-26'
        created_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
    Tag:
      type: object
      properties:
        name:
          type: string
          example: Vue.js
    RecentMonthlyReports:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        id:
          type: number
          example: 21
        user_id:
          type: number
          example: 13
        target_month:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        project_summary:
          type: string
          example: 概要
        business_content:
          type: string
          example: 内容
        looking_back:
          type: string
          example: 振り返り
        next_month_goals:
          type: string
          example: 来月の目標
        shipped_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        created_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        assign:
          type: integer
          enum:
            - 1
            - 2
          description: |
            * 1 - 待機中 * 2 - アサイン中
        is_deleted:
          type: boolean
          example: false
        comments_count:
          type: number
          example: 4
        likes_count:
          type: number
          example: 0
    ReportsOfFollowingUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        id:
          type: number
          example: 21
        user_id:
          type: number
          example: 13
        target_month:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        project_summary:
          type: string
          example: 概要
        business_content:
          type: string
          example: 内容
        looking_back:
          type: string
          example: 振り返り
        next_month_goals:
          type: string
          example: 来月の目標
        shipped_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        created_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-04-26T17:32:28Z'
        assign:
          type: integer
          enum:
            - 1
            - 2
          description: |
            * 1 - 待機中 * 2 - アサイン中
        is_deleted:
          type: boolean
          example: false
        comments_count:
          type: number
          example: 4
        likes_count:
          type: number
          example: 0
    Department:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          enum:
            - PHP
            - WEB
            - JAVA
            - FR
            - CL
            - ML
            - QA
            - 内勤
        deleted_at:
          type: string
          format: date-time
          example: '2025-04-27T05:03:42'
        created_at:
          type: string
          format: date-time
          example: '2025-04-27T05:03:42'
        updated_at:
          type: string
          format: date-time
          example: '2025-04-27T05:03:42'
    DepartmentEnum:
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      description: |
        * 1 - WEB * 2 - CL * 3 - ML * 4 - 内勤 * 5 - 未設定 * 6 - FR * 7 - QA * 8 - PHP
    UserRegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        department_id:
          type: integer
          nullable: true
        beginner_flg:
          type: boolean
          nullable: true
        entry_date:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          nullable: true
    UserProfile:
      type: object
      properties:
        user_id:
          type: integer
        blood_type:
          type: integer
        birthday:
          type: string
          format: date
          nullable: true
        github_url:
          type: string
          nullable: true
        qiita_url:
          type: string
          nullable: true
        self_introduction:
          type: string
          nullable: true
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        department_id:
          type: integer
          nullable: true
        beginner_flg:
          type: boolean
          nullable: true
        email:
          type: string
        entry_date:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          nullable: true
        blood_type:
          type: integer
          nullable: true
        birthday:
          type: string
          format: date
          nullable: true
        github_url:
          type: string
          nullable: true
        qiita_url:
          type: string
          nullable: true
        self_introduction:
          type: string
          nullable: true
  responses:
    SimpleSuccessResponse:
      description: リソースが正常に作成されました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
            example:
              message: Successメッセージ
    400BadRequestError:
      description: リクエストが不正です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: リクエストパラメータが不正です
    422UnprocessableContentError:
      description: クライアントが無効な引数を指定しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: バリデーションエラーです。
    500InternalServerError:
      description: サーバー内部でエラーが発生しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: 内部サーバーエラーが発生しました。詳細はサーバーログを確認してください。
    403ForbiddenError:
      description: アクセス権限がありません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: このリソースにアクセスする権限がありません
    401UnauthorizedError:
      description: 認証に失敗しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: 認証に失敗しました
  parameters:
    XSRF-TOKEN:
      name: XSRF-TOKEN
      in: header
      required: true
      schema:
        type: string
        description: XSRF-TOKENを格納する
        example: xsrf-token=1234567890
    dash_replace2_session:
      name: dash_replace2_session
      in: header
      required: true
      schema:
        type: string
        description: セッション情報を格納する
        example: dash_replace2_session=1234567890
